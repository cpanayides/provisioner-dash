extends layout

block content
  h1= title
  p Welcome to #{title}
  div#provisioning-assets
  div#num-provisioning
    h1.provisioning-count 0
    h4 assets provisioning
    h1.allocating-count 0
    h4 assets allocating
    h1.unallocated-count 0
    h4 assets unallocated
    h3 Hardware type: 
      span.hardware-type all

  script(src='/faye/client.js')
  script.
    $(function(){
      var Asset = Backbone.Model.extend({
        idAttribute: "TAG",
      });
      var Assets = Backbone.Collection.extend({
        model: Asset,
      });
      var ProvisioningAssetView = Backbone.View.extend({
        template: _.template($('#asset-template').html()),
        render: function(){
          var m = this.model.attributes;
          this.$el.html($(this.template(this.model.attributes)).addClass("asset-" + this.model.get('TAG')));
          return this;
        }
      });
      var ProvisioningAssetsView = Backbone.View.extend({
        subviews: {},
        statuses: ["Provisioning","Provisioned"],
        el: $('#provisioning-assets'),
        initialize: function(){
          //TODO: listen to sort to reorder, error, etc
          this.listenTo(assets, 'add', this.addAsset);
          this.listenTo(assets, 'remove', this.removeAsset);
          this.listenTo(assets, 'change', this.updateAsset);
        },
        addAsset: function(asset, coll){
          if (_.contains(this.statuses,asset.get('STATUS'))){
            console.log("add " + asset.get('TAG'));
            var view = new ProvisioningAssetView({model: asset});
            this.subviews[asset.get('TAG')] = view;
            this.$el.append(view.render().el);
          }
        },
        removeAsset: function(asset, coll){
          if (_.contains(this.statuses,asset.get('STATUS'))){
            console.log("remove " + asset.get('TAG'));
            $('.asset-' + asset.attributes.TAG).remove();
            delete this.subviews[asset.get('TAG')];
          }
        },
        updateAsset: function(asset, coll){
          console.log("collection updated with: " + asset.get('TAG'));
          var view = this.subviews[asset.get('TAG')];
          if (_.contains(this.statuses,asset.get('STATUS'))){
            if (view) {
              // asset updated and we were already rendering him. just rerender
              console.log("rerendering ProvisioningAssetView for " + asset.get('TAG') + " due to attr update");
              view.render();
            } else {
              //create a new view, this asset just got put into a status we care about
              this.addAsset(asset,coll);
            }
          } else {
            if (view) {
              // asset transitioned from a status we care about to one we dont. delete the view
              console.log("" + asset.get('TAG') + " is now " + asset.get('STATUS') + ", removing from view");
              view.$el.remove();
              delete this.subviews[asset.get('TAG')];
            } else {
              console.log("no ProvisioningAssetView to delete for " + asset.get('TAG'));
            }
          }
        }
      });

      var NumProvisioningHostsView = Backbone.View.extend({
        el: $('#num-provisioning'),
        initialize: function(){
          this.listenTo(assets, 'all', this.render);
          //TODO: uncomment when hardare_filter model is available
          //this.listenTo(hardware_filter, 'all', this.render);
        },
        render: function(){
          this.$el.find('.provisioning-count').html(assets.filter(function(a){
            return a.get('STATUS') === "Provisioning";
          }).length);
          this.$el.find('.allocating-count').html(assets.filter(function(a){
            return a.get('STATUS') === "Provisioned";
          }).length);
          this.$el.find('.unallocated-count').html(assets.filter(function(a){
            return a.get('STATUS') === "Unallocated";
          }).length);
          //TODO: implement me
          //this.$el.find('span.hardware-type').html(hardware_filter.get('type'));
        }
      });

      // bootstrap in our collection, triggering events
      var bootstrapped_assets = !{JSON.stringify(assets)};

      // create collections (empty)
      var assets = new Assets();

      // create layouts and views
      var dash = new ProvisioningAssetsView();
      var provision_count = new NumProvisioningHostsView();

      // bootstrap in our models for inital render
      assets.add(bootstrapped_assets);


      // demonstrate how adding/removing models works
      setTimeout(function(){
        console.log("removing tumblrtag301");
        var x = assets.remove(assets.get('tumblrtag301'));
        setTimeout(function(){
          console.log("adding tumblrtag301");
          assets.add(x);
        },2000);
      },2000);

      // set up a websocket and listen for events from server for messages
      var faye = new Faye.Client('/faye');

      /*
      faye.subscribe('/news',function(m){
        console.log("i got a news message: " + m);
      });
      */

      faye.subscribe('/asset/update',function(a){
        // this will just add/update any new assets into the collection. if it is in a status
        // we dont care about, the views will filter those out, so no worries
        console.log("asset updated: " + a.TAG);
        assets.add(new Asset(a),{merge: true});
      });

    });

  script(type='text/template')#asset-template
    div.span12.asset-view
      span <%= this.model.get('TAG') %>
      span <%= this.model.get('STATUS') %>
      span <%= this.model.get('HOSTNAME') %>
      span <%= this.model.get('NODECLASS') %>




